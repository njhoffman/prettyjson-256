{"version":3,"sources":["../lib/settings.js"],"names":["defaultOptions","alphabetizeKeys","defaultIndentation","depth","emptyArrayMsg","emptyObjectMsg","emptyStringMsg","noColor","numberArrays","showEmpty","colors","boolFalse","fg","boolTrue","dash","date","empty","functionHeader","functionTag","keys","number","string","createColorObj","colorMap","printColor","each","val","key","sInput","reset","cItem","length","grayscale","getRgb","apply","bg","bind","init","customOptions","options","defaultsDeep","parseInt","newColors","clone","customColors","pColor","cloneDeep","outputColorCodes","colorCodes","r","g","b"],"mappings":"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","file":"settings.js","sourcesContent":["import _ from 'lodash';\nimport colors from 'ansi-256-colors';\n\nexport let defaultOptions = {\n  // sort object keys or array values alphabetically\n  alphabetizeKeys:    false,\n  // how many spaces to indent nested objects\n  defaultIndentation: 2,\n  // maximum depth of nested levels to display for an object\n  depth:              -1,\n  // what to display if value is an empty array, object, or string\n  emptyArrayMsg:      '(empty array)',\n  emptyObjectMsg:     '{}',\n  emptyStringMsg:     '\"\"',\n  // don't output any color\n  noColor:            false,\n  // show array indexes, this will prevent array from sorting if alphabetizeKeys is on\n  numberArrays:       false,\n  // show if contained in an object an array, string, or another object is empty\n  showEmpty:          true,\n  // color codes for different output elements based on: https://github.com/jbnicolai/ansi-256-colors\n  colors:             {\n    boolFalse:        { fg: [5, 4, 4] },\n    boolTrue:         { fg: [4, 4, 5] },\n    dash:             { fg: [2, 5, 4] },\n    date:             { fg: [0, 5, 2] },\n    depth:            { fg: [9] },\n    empty:            { fg: [13] },\n    functionHeader:   { fg: [13] },\n    functionTag:      { fg: [4, 4, 5] },\n    keys:             { fg: [2, 5, 4] },\n    number:           { fg: [2, 4, 5] },\n    string:           null\n  }\n};\n\nconst createColorObj = (colorMap) => {\n  var printColor = {};\n  _.each(colorMap, (val, key) => {\n    printColor[key] = function (key, sInput) {\n      if (!colorMap[key]) {\n        return colors.reset + sInput;\n      }\n      let cItem =\n        colorMap[key].fg\n          ? colorMap[key].fg.length === 1\n            ? colors.fg.grayscale[colorMap[key].fg[0]]\n            : colorMap[key].fg.length === 3\n            ? colors.fg.getRgb.apply(this, colorMap[key].fg)\n            : ''\n          : '';\n      cItem +=\n        (colorMap[key].bg\n          ? colorMap[key].bg.length === 1\n            ? colors.bg.grayscale[colorMap[key].bg[0]]\n            : colorMap[key].bg.length === 3\n            ? colors.bg.getRgb.apply(this, colorMap[key].bg)\n            : ''\n          : '') + sInput + colors.reset;\n      return cItem;\n    }.bind(this, key);\n  });\n  return printColor;\n};\n\nexport const init = (customOptions = {}) => {\n  options = _.defaultsDeep(customOptions, defaultOptions);\n  options.depth = parseInt(options.depth);\n  options.defaultIndentation = parseInt(options.defaultIndentation);\n\n  const newColors = _.clone(options.colors);\n  if (options.customColors) {\n    _.each(_.keys(options.customColors), (key) => {\n      newColors[key] = options.customColors[key];\n    });\n  }\n  pColor = createColorObj(newColors);\n  return pColor;\n};\n\nexport let options = _.cloneDeep(defaultOptions);\nexport let pColor = init(options);\n\nexport const outputColorCodes = () => {\n  let colorCodes = '';\n  for (let r = 0; r <= 5; r++) {\n    for (let g = 0; g <= 5; g++) {\n      for (let b = 0; b <= 5; b++) {\n        colorCodes += colors.fg.getRgb(r, g, b) + `[color ${r}, ${g}, ${b}]   ` + colors.reset;\n      }\n      colorCodes += '\\n';\n    }\n    colorCodes += '\\n';\n  }\n  return colorCodes;\n};\n"]}
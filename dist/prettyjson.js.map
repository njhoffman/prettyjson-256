{"version":3,"sources":["../lib/prettyjson.js"],"names":["require","isArray","isObjectLike","each","isEmpty","keys","flattenDeep","getOptions","getPrintColor","settingsInit","init","parse","pColor","maxSortDepth","currSortDepth","_sortKeys","data","parentIsArray","sortedData","numberArrays","sort","key","push","customOptions","render","startIndent","alphabetizeKeys","ret","browser","messages","filter","el","i","colorCodes","renderString","output","parsedData","beginningOfJson","indexOf","string","substr","JSON","e","exports","module"],"mappings":"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","file":"prettyjson.js","sourcesContent":["const { isArray, isObjectLike, each, isEmpty, keys, flattenDeep } = require('lodash');\nconst { getOptions, getPrintColor, init: settingsInit } = require('./settings');\nconst parse = require('./parser');\n\nlet pColor = getPrintColor();\n\nconst maxSortDepth = 20;\nlet currSortDepth = 0;\nconst _sortKeys = (data, parentIsArray) => {\n  let sortedData = parentIsArray && !getOptions().numberArrays ? [] : {};\n  each(keys(data).sort(), (key) => {\n    // continue recursion if item is object and not exceeding maximum depth\n    if (isObjectLike(data[key]) && currSortDepth < maxSortDepth) {\n      currSortDepth++;\n      if (isArray(data[key])) {\n        sortedData[key] = _sortKeys(data[key], (!getOptions().numberArrays));\n      } else {\n        sortedData[key] = _sortKeys(data[key]);\n      }\n    } else {\n      if (isArray(sortedData)) {\n        sortedData.push(data[key]);\n      } else {\n        sortedData[key] = data[key];\n      }\n    }\n  });\n  currSortDepth--;\n  return sortedData;\n};\n\nconst init = (customOptions = {}) => {\n  settingsInit(customOptions);\n  return render;\n};\n\nconst render = (data, startIndent = 0, customOptions = {}) => {\n  !isEmpty(customOptions) && settingsInit(customOptions);\n  if (getOptions().alphabetizeKeys) {\n    data = _sortKeys(data, isArray(data));\n  }\n  let ret = parse(data, startIndent);\n  if (getOptions().browser) {\n    ret = flattenDeep(ret);\n    const messages = ret.filter((el, i) => i % 2 === 0);\n    const colorCodes = ret.filter((el, i) => i % 2 !== 0);\n    return [messages, colorCodes];\n  }\n  return ret;\n};\n\nconst renderString = (data, customOptions) => {\n  // called from direct entry of cli\n  !isEmpty(customOptions) && settingsInit(customOptions);\n\n  let output = '';\n  let parsedData;\n\n  if (typeof data !== 'string' || data === '') {\n    return '';\n  }\n\n  if (data[0] !== '{' && data[0] !== '[') {\n    let beginningOfJson =\n      data.indexOf('{') === -1\n      ? data.indexOf('[')\n      : data.indexOf('[') === -1\n      ? data.indexOf('{')\n      : data.indexOf('{') < data.indexOf('[')\n      ? data.indexOf('{')\n      : data.indexOf('[');\n    output += pColor.string(data.substr(0, beginningOfJson)) + '\\n';\n    data = data.substr(beginningOfJson);\n  }\n\n  try {\n    parsedData = JSON.parse(data);\n  } catch (e) {\n    // just send back as is\n    parsedData = data;\n  }\n\n  output += exports.render(parsedData);\n  return output;\n};\n\nexports = module.exports = {\n  renderString,\n  render,\n  init\n};\n"]}
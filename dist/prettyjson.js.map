{"version":3,"sources":["../lib/prettyjson.js"],"names":["_","require","getOptions","getPrintColor","outputColorCodes","settingsInit","init","parse","pColor","maxSortDepth","currSortDepth","_sortKeys","data","parentIsArray","sortedData","numberArrays","each","keys","sort","isObjectLike","key","isArray","push","render","startIndent","customOptions","options","defaultsDeep","alphabetizeKeys","browser","ret","flattenDeep","messages","filter","el","i","colorCodes","renderString","isEmpty","output","parsedData","beginningOfJson","indexOf","string","substr","JSON","e","exports","module"],"mappings":"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","file":"prettyjson.js","sourcesContent":["const _ = require('lodash');\nconst { getOptions, getPrintColor, outputColorCodes, init: settingsInit } = require('./settings');\nconst parse = require('./parser');\n\nconst pColor = getPrintColor();\n\nconst maxSortDepth = 20;\nlet currSortDepth = 0;\nconst _sortKeys = (data, parentIsArray) => {\n  const sortedData = parentIsArray && !getOptions().numberArrays ? [] : {};\n  _.each(_.keys(data).sort(), key => {\n    // continue recursion if item is object and not exceeding maximum depth\n    if (_.isObjectLike(data[key]) && currSortDepth < maxSortDepth) {\n      currSortDepth += 1;\n      if (_.isArray(data[key])) {\n        sortedData[key] = _sortKeys(data[key], !getOptions().numberArrays);\n      } else {\n        sortedData[key] = _sortKeys(data[key]);\n      }\n    } else if (_.isArray(sortedData)) {\n      sortedData.push(data[key]);\n    } else {\n      sortedData[key] = data[key];\n    }\n  });\n  currSortDepth -= 1;\n  return sortedData;\n};\n\nconst render = (data, startIndent = 0, customOptions = {}) => {\n  const options = _.defaultsDeep(getOptions(), customOptions);\n  const { alphabetizeKeys, browser } = options;\n  const sortedData = alphabetizeKeys ? _sortKeys(data, _.isArray(data)) : data;\n\n  let ret = parse(sortedData, startIndent, options);\n  // console.info('parse return', ret);\n  if (browser) {\n    ret = _.flattenDeep(ret);\n    const messages = ret.filter((el, i) => i % 2 === 0);\n    const colorCodes = ret.filter((el, i) => i % 2 !== 0);\n    return [messages, colorCodes];\n  }\n  return ret;\n};\n\nconst renderString = (data, customOptions) => {\n  // called from direct entry of cli\n  if (!_.isEmpty(customOptions)) {\n    settingsInit(customOptions);\n  }\n\n  let output = '';\n  let parsedData;\n\n  if (typeof data !== 'string' || data === '') {\n    return '';\n  }\n\n  if (data[0] !== '{' && data[0] !== '[') {\n    const beginningOfJson =\n      data.indexOf('{') === -1\n        ? data.indexOf('[')\n        : data.indexOf('[') === -1\n        ? data.indexOf('{')\n        : data.indexOf('{') < data.indexOf('[')\n        ? data.indexOf('{')\n        : data.indexOf('[');\n    output += `${pColor.string(data.substr(0, beginningOfJson))}\\n`;\n    data = data.substr(beginningOfJson);\n  }\n\n  try {\n    parsedData = JSON.parse(data);\n  } catch (e) {\n    // just send back as is\n    parsedData = data;\n  }\n\n  output += exports.render(parsedData);\n  return output;\n};\n\nconst init = (customOptions = {}) => {\n  settingsInit(customOptions);\n  return render;\n};\n\nexports = module.exports = {\n  getOptions,\n  outputColorCodes,\n  renderString,\n  render,\n  init\n};\n"]}
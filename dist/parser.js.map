{"version":3,"sources":["../lib/parser.js"],"names":["_","require","Utils","getOptions","getPrintColor","options","pColor","_addColorToData","sInput","input","isString","string","isNumber","number","boolTrue","boolFalse","empty","Date","date","isArray","join","_indentMultiLine","spaces","split","map","indent","line","_handleMultiLine","data","indentation","defaultIndentation","_handleFunction","funcTag","functionTag","funcHeader","functionHeader","toString","replace","browser","_handleError","errorDivider","errorName","name","errorMessage","message","errorStack","stack","_handleArray","depthLevel","level","arrayOut","depth","length","push","each","element","i","numberArrays","dash","parsedEl","parse","trim","_handleObject","maxIndexLength","getMaxIndexLength","objOut","key","keys","isSerializable","isObjectLike","isEmpty","showEmpty","inlineData","_handleEmpty","emptyArrayMsg","emptyObjectMsg","emptyStringMsg","_handleSerializable","isCustomColor","customColors","colorKey","isFunction","isDate","output","concat","isError","module","exports","renderOptions"],"mappings":"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","file":"parser.js","sourcesContent":["const _ = require('lodash');\nconst Utils = require('./utils');\n\nconst { getOptions, getPrintColor } = require('./settings');\n\nlet options;\nlet pColor;\n\nconst _addColorToData = input => {\n  const sInput = `${input}`;\n\n  if (_.isString(input)) {\n    return pColor.string(input);\n  }\n  if (_.isNumber(input)) {\n    return pColor.number(input);\n  }\n  if (input === true) {\n    return pColor.boolTrue(sInput);\n  }\n  if (input === false) {\n    return pColor.boolFalse(sInput);\n  }\n  if (input === null) {\n    return pColor.empty(sInput);\n  }\n  if (input instanceof Date) {\n    return pColor.date(sInput);\n  }\n  if (_.isArray(input)) {\n    return input.join(', ');\n  }\n\n  return sInput;\n};\n\nconst _indentMultiLine = (string, spaces) => {\n  return string\n    .split('\\n')\n    .map(line => Utils.indent(spaces) + line)\n    .join('\\n');\n};\n\nconst _handleMultiLine = (data, indentation) => {\n  return [\n    `${Utils.indent(indentation)}\"\"\"`,\n    _indentMultiLine(data, indentation + options.defaultIndentation),\n    `${Utils.indent(indentation)}\"\"\"`\n  ];\n};\n\nconst _handleFunction = (data, indentation) => {\n  const funcTag = pColor.functionTag('[Function] ');\n  const funcHeader = pColor.functionHeader(\n    data\n      .toString()\n      .split('\\n')[0]\n      .replace('{', '')\n  );\n  return options.browser\n    ? [Utils.indent(indentation, funcTag), funcHeader]\n    : Utils.indent(indentation, funcTag) + funcHeader;\n};\n\nconst _handleError = (data, indentation) => {\n  return [\n    `${pColor.errorDivider(options.errorDivider)}\\n${pColor.errorName(data.name)}\\n${pColor.errorMessage(\n      data.message\n    )}\\n${pColor.errorStack(data.stack)}\\n${pColor.errorDivider(options.errorDivider)}`\n  ];\n};\n\nconst _handleArray = (data, indentation, depthLevel) => {\n  let level = depthLevel;\n  const arrayOut = [];\n\n  if (level + 1 === options.depth) {\n    const line = Utils.indent(indentation, pColor.depth(`[Array length ${data.length}]`));\n    arrayOut.push(line);\n  } else {\n    level += 1;\n    _.each(data, function(element, i) {\n      let line = options.numberArrays ? `-[${i}] ` : '- ';\n      line = Utils.indent(indentation, pColor.dash(line));\n      // if arrays are numbered, each element should be on its own line\n      if (options.numberArrays) {\n        arrayOut.push(line);\n        line = Utils.indent(indentation + options.defaultIndentation);\n      }\n\n      const parsedEl = parse(element, indentation + options.defaultIndentation, level);\n      if (_.isArray(parsedEl)) {\n        line = parsedEl;\n      } else {\n        line += parsedEl.trim();\n      }\n      arrayOut.push(line);\n    });\n  }\n  return arrayOut;\n};\n\nconst _handleObject = (data, indentation, depthLevel) => {\n  // Get the size of the longest index to align all the values\n  const maxIndexLength = Utils.getMaxIndexLength(data);\n  const level = depthLevel + 1;\n  const objOut = [];\n  let key;\n\n  _.each(_.keys(data), i => {\n    const element = data[i];\n    key = Utils.indent(indentation, pColor.keys(`${i}: `));\n\n    // If the value is serializable, render it on the same line\n    if (Utils.isSerializable(element, options)) {\n      // but don't render anything if showEmpty setting is false and data is empty array, object, or string\n      if (!((_.isObjectLike(element) || _.isString(element)) && _.isEmpty(element) && !options.showEmpty)) {\n        const inlineData = parse(element, maxIndexLength - i.length);\n        if (options.browser) {\n          // add %i identifier to indicate inline data should be printed on same line\n          // TODO: hacky, fix or at least handle more than one nested color obj depth\n          if (_.isArray(inlineData[0])) {\n            inlineData[0][0] += '%i';\n            inlineData[1][0] += '%i';\n          } else {\n            inlineData[0] += '%i';\n          }\n          objOut.push([key, inlineData]);\n        } else {\n          objOut.push(key + inlineData);\n        }\n      }\n    } else if (level === options.depth) {\n      // dont nest any more for object if depth level reached\n      key += Utils.indent(maxIndexLength - i.length, pColor.depth(`[Object] (${_.keys(element).length} keys)`));\n      objOut.push(key);\n    } else if (level + 1 === options.depth && _.isArray(element)) {\n      key += Utils.indent(maxIndexLength - i.length, pColor.depth(`[Array length ${_.keys(element).length}]`));\n      objOut.push(key);\n    } else if (options.browser) {\n      // If the index is an array or object, render it in next line\n      // key[0] = '\\n' + key[0];\n      // key[0] = key[0] + '\\n';\n      objOut.push(key, parse(element, indentation + options.defaultIndentation, level));\n    } else {\n      objOut.push(key);\n      objOut.push(parse(element, indentation + options.defaultIndentation, level));\n    }\n  });\n  return objOut;\n};\n\nconst _handleEmpty = (data, indentation) => {\n  if (_.isArray(data)) {\n    return Utils.indent(indentation, pColor.empty(options.emptyArrayMsg));\n  } else if (_.isObjectLike(data)) {\n    return Utils.indent(indentation, pColor.empty(options.emptyObjectMsg));\n  }\n  return Utils.indent(indentation, pColor.empty(options.emptyStringMsg));\n};\n\nconst _handleSerializable = (data, indentation) => {\n  if (Utils.isCustomColor(data, options.customColors)) {\n    const colorKey = _.keys(data)[0];\n    return Utils.indent(indentation, pColor[colorKey](data[colorKey]));\n  } else if (_.isFunction(data)) {\n    return _handleFunction(data, indentation);\n  } else if (_.isDate(data) || _.isNumber(data)) {\n    return Utils.indent(indentation, _addColorToData(data));\n  } else if ((_.isObjectLike(data) || _.isString(data)) && _.isEmpty(data)) {\n    return _handleEmpty(data, indentation);\n  }\n  return Utils.indent(indentation, _addColorToData(data));\n};\n\nconst parse = (data, indentation = 0, level = 0) => {\n  let output = [];\n\n  if (Utils.isSerializable(data, options)) {\n    output = output.concat(_handleSerializable(data, indentation));\n  } else if (_.isString(data)) {\n    // unserializable string means it's multiline\n    output = output.concat(_handleMultiLine(data, indentation));\n  } else if (_.isArray(data)) {\n    output = output.concat(_handleArray(data, indentation, level));\n  } else if (_.isError(data)) {\n    output = output.concat(_handleError(data, indentation, level));\n  } else if (_.isObjectLike(data) && options.depth !== 0) {\n    output = output.concat(_handleObject(data, indentation, level));\n  }\n\n  // Return all the lines as a string if going to terminal, otherwise return array for browser output\n  return options.browser ? output : output.join('\\n');\n};\n\nmodule.exports = (data, indentation, renderOptions) => {\n  options = renderOptions || getOptions();\n  pColor = getPrintColor();\n  return parse(data, indentation);\n};\n"]}
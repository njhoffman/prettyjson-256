{"version":3,"sources":["../lib/parser.js"],"names":["Utils","require","isError","isFunction","isArray","isString","isDate","isObjectLike","isEmpty","isNumber","each","keys","getOptions","getPrintColor","options","pColor","_addColorToData","input","sInput","string","number","boolTrue","boolFalse","empty","Date","date","join","_indentMultiLine","spaces","split","map","indent","line","_handleMultiLine","data","indentation","defaultIndentation","_handleFunction","funcTag","functionTag","funcHeader","functionHeader","toString","replace","browser","_handleError","errorDivider","errorName","name","errorMessage","message","errorStack","stack","_handleArray","level","arrayOut","depth","length","push","element","i","numberArrays","dash","parsedEl","parse","trim","_handleObject","maxIndexLength","getMaxIndexLength","objOut","key","isSerializable","showEmpty","inlineData","_handleEmpty","emptyArrayMsg","emptyStringMsg","emptyObjectMsg","_handleSerializable","isCustomColor","customColors","colorKey","output","concat","module","exports"],"mappings":"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","file":"parser.js","sourcesContent":["const Utils = require('./utils');\nconst {\n  isError,\n  isFunction,\n  isArray,\n  isString,\n  isDate,\n  isObjectLike,\n  isEmpty,\n  isNumber,\n  each,\n  keys\n} = require('lodash');\n\nconst { getOptions, getPrintColor } = require('./settings');\nlet options = getOptions();\nlet pColor = getPrintColor();\n\nconst _addColorToData = (input) => {\n  let sInput = input + '';\n\n  /* eslint-disable no-multi-spaces */\n  if (isString(input))       { return pColor.string(input); }\n  if (isNumber(input))       { return pColor.number(input); }\n  if (input === true)        { return pColor.boolTrue(sInput); }\n  if (input === false)       { return pColor.boolFalse(sInput); }\n  if (input === null)        { return pColor.empty(sInput); }\n  if (input instanceof Date) { return pColor.date(sInput); }\n  if (isArray(input))        { return input.join(', '); }\n  /* eslint-enable no-multi-spaces */\n\n  return sInput;\n};\n\nconst _indentMultiLine = (string, spaces) => {\n  return string\n    .split('\\n')\n    .map(line => (Utils.indent(spaces) + line))\n    .join('\\n');\n};\n\nconst _handleMultiLine = (data, indentation) => {\n  return [\n    Utils.indent(indentation) + '\"\"\"',\n    _indentMultiLine(data, indentation + options.defaultIndentation),\n    Utils.indent(indentation) + '\"\"\"'\n  ];\n};\n\nconst _handleFunction = (data, indentation) => {\n  const funcTag = pColor.functionTag('[Function] ');\n  const funcHeader = pColor.functionHeader(data.toString().split('\\n')[0].replace('{', ''));\n  return options.browser ?\n    [ Utils.indent(indentation, funcTag), funcHeader ] :\n    Utils.indent(indentation, funcTag) + funcHeader;\n};\n\nconst _handleError = (data, indentation) => {\n  const funcHeader = data.toString().split('\\n')[0].replace('{', '');\n  return [\n    pColor.errorDivider(options.errorDivider) + '\\n' +\n    pColor.errorName(data.name) + '\\n' +\n    pColor.errorMessage(data.message) + '\\n' +\n    pColor.errorStack(data.stack) + '\\n' +\n    pColor.errorDivider(options.errorDivider)\n  ];\n};\n\nconst _handleArray = (data, indentation, level) => {\n  let arrayOut = [];\n  if (level + 1 === options.depth) {\n    let line = Utils.indent(indentation, pColor.depth(`[Array length ${data.length}]`));\n    arrayOut.push(line);\n  } else {\n    level++;\n    each(data, function (element, i) {\n      let line = options.numberArrays ? `-[${i}] ` : '- ';\n      line = Utils.indent(indentation, pColor.dash(line));\n      // if arrays are numbered, each element should be on its own line\n      if (options.numberArrays) {\n        arrayOut.push(line);\n        line = Utils.indent(indentation + options.defaultIndentation);\n      }\n      let parsedEl = parse(\n        element,\n        indentation + options.defaultIndentation,\n        level\n      );\n      if (isArray(parsedEl)) {\n        line = parsedEl;\n      } else {\n        line += parsedEl.trim();\n      }\n      arrayOut.push(line);\n    });\n  }\n  return arrayOut;\n};\n\nconst _handleObject = (data, indentation, level) => {\n  // Get the size of the longest index to align all the values\n  let maxIndexLength = Utils.getMaxIndexLength(data);\n  let objOut = [];\n  let key;\n  level++;\n\n  each(keys(data), (i) => {\n    const element = data[i];\n    key = Utils.indent(indentation, pColor.keys(i + ': '));\n\n    // If the value is serializable, render it on the same line\n    if (Utils.isSerializable(element, options)) {\n        // but don't render anything if showEmpty setting is false and data is empty array, object, or string\n      if (!((isObjectLike(element) || isString(element)) && isEmpty(element) && !options.showEmpty)) {\n        const inlineData = parse(element, maxIndexLength - i.length);\n        if (options.browser) {\n          // add %i identifier to indicate inline data should be printed on same line\n          // TODO: hacky, fix or at least handle more than one nested color obj depth\n          if (isArray(inlineData[0])) {\n            inlineData[0][0] += '%i';\n            inlineData[1][0] += '%i';\n          } else {\n            inlineData[0] += '%i';\n          }\n          objOut.push([key, inlineData]);\n        } else {\n          objOut.push(key + inlineData);\n        }\n      }\n    } else if (level === options.depth) {\n      // dont nest any more for object if depth level reached\n      key += Utils.indent((maxIndexLength - i.length),\n        pColor.depth(`[Object] (${keys(element).length} keys)`));\n      objOut.push(key);\n    } else if (level + 1 === options.depth && isArray(element)) {\n      key += Utils.indent((maxIndexLength - i.length),\n        pColor.depth(`[Array length ${keys(element).length}]`));\n      objOut.push(key);\n    } else {\n      // If the index is an array or object, render it in next line\n      if (options.browser) {\n        // key[0] = '\\n' + key[0];\n        // key[0] = key[0] + '\\n';\n        objOut.push(key, parse(element, indentation + options.defaultIndentation, level));\n      } else {\n        objOut.push(key);\n        objOut.push(parse(element, indentation + options.defaultIndentation, level));\n      }\n    }\n  });\n  return objOut;\n};\n\nconst _handleEmpty = (data, indentation) => {\n  if (isArray(data)) {\n    return Utils.indent(indentation, pColor.empty(options.emptyArrayMsg));\n  } else if (isString(data)) {\n    return Utils.indent(indentation, pColor.empty(options.emptyStringMsg));\n  } else if (isObjectLike(data)) {\n    return Utils.indent(indentation, pColor.empty(options.emptyObjectMsg));\n  }\n};\n\nconst _handleSerializable = (data, indentation) => {\n  if (Utils.isCustomColor(data, options.customColors)) {\n    const colorKey = keys(data)[0];\n    return Utils.indent(indentation, pColor[colorKey](data[colorKey]));\n  } else if (isFunction(data)) {\n    return _handleFunction(data, indentation);\n  } else if (isDate(data) || isNumber(data)) {\n    return Utils.indent(indentation,  _addColorToData(data));\n  } else if ((isObjectLike(data) || isString(data)) && isEmpty(data)) {\n    return _handleEmpty(data, indentation);\n  } else {\n    return Utils.indent(indentation, _addColorToData(data));\n  }\n};\n\nconst parse = (data, indentation = 0, level = 0) => {\n  let output = [];\n  options = getOptions();\n  pColor = getPrintColor();\n\n  if (Utils.isSerializable(data, options)) {\n    output = output.concat(_handleSerializable(data, indentation));\n  } else if (isString(data)) {\n    // unserializable string means it's multiline\n    output = output.concat(_handleMultiLine(data, indentation));\n  } else if (isArray(data)) {\n    output = output.concat(_handleArray(data, indentation, level));\n  } else if (isError(data)) {\n    output = output.concat(_handleError(data, indentation, level));\n  } else if (isObjectLike(data)) {\n    output = output.concat(_handleObject(data, indentation, level));\n  }\n\n  // Return all the lines as a string if going to terminal, otherwise return array for browser output\n  return options.browser ? output : output.join('\\n');\n};\n\nmodule.exports = parse;\n"]}
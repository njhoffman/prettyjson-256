{"version":3,"sources":["../lib/parser.js"],"names":["_addColorToData","input","sInput","noColor","string","number","boolTrue","boolFalse","empty","Date","date","join","_indentMultiLine","spaces","split","map","indent","line","_handleMultiLine","data","indentation","defaultIndentation","_handleFunction","funcHeader","toString","replace","functionTag","functionHeader","_handleArray","level","arrayOut","depth","length","push","element","i","numberArrays","dash","parse","trim","_handleObject","maxIndexLength","getMaxIndexLength","key","isError","Error","objOut","keys","isSerializable","inlineArrays","showEmpty","_handleEmpty","emptyArrayMsg","emptyStringMsg","emptyObjectMsg","_handleSerializable","output","customColors","some","concat"],"mappings":"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","file":"parser.js","sourcesContent":["import Utils from './utils';\nimport {\n  isFunction,\n  isArray,\n  isString,\n  isDate,\n  isObjectLike,\n  isEmpty,\n  isNumber,\n  each,\n  keys\n} from 'lodash';\n\nimport { options, pColor } from './settings';\n\nconst _addColorToData = (input) => {\n  let sInput = input + '';\n\n  /* eslint-disable no-multi-spaces */\n  if (options.noColor)       { return sInput; }\n  if (isString(input))       { return pColor.string(input); }\n  if (isNumber(input))       { return pColor.number(input); }\n  if (input === true)        { return pColor.boolTrue(sInput); }\n  if (input === false)       { return pColor.boolFalse(sInput); }\n  if (input === null)        { return pColor.empty(sInput); }\n  if (input === '')          { return pColor.empty('(empty)'); }\n  if (input instanceof Date) { return pColor.date(sInput); }\n  if (isArray(input))        { return input.join(', '); }\n  /* eslint-enable no-multi-spaces */\n\n  return sInput;\n};\n\nconst _indentMultiLine = (string, spaces) => {\n  return string\n    .split('\\n')\n    .map(line => (Utils.indent(spaces) + line))\n    .join('\\n');\n};\n\nconst _handleMultiLine = (data, indentation) => {\n  return [\n    Utils.indent(indentation) + '\"\"\"',\n    _indentMultiLine(data, indentation + options.defaultIndentation),\n    Utils.indent(indentation) + '\"\"\"'\n  ];\n};\n\nconst _handleFunction = (data, indentation) => {\n  const funcHeader = data.toString().split('\\n')[0].replace('{', '');\n  return [\n    Utils.indent(indentation) +\n    (options.noColor ? '[Function] ' : pColor.functionTag('[Function] ')) +\n    (options.noColor ? funcHeader : pColor.functionHeader(funcHeader))\n  ];\n};\n\nconst _handleArray = (data, indentation, level) => {\n  let arrayOut = [];\n  if (level + 1 === options.depth) {\n    let line = Utils.indent(indentation) +\n      (options.noColor ? `[Array length ${data.length}]` : pColor.depth(`[Array length ${data.length}]`));\n    arrayOut.push(line);\n  } else {\n    level++;\n    each(data, function (element, i) {\n      // Prepend the dash at the begining of each array's element line\n      let line = options.numberArrays ? `-[${i}] ` : '- ';\n      if (!options.noColor) {\n        line = pColor.dash(line);\n      }\n      line = Utils.indent(indentation) + line;\n      // if arrays are numbered, each element should be on its own line\n      if (options.numberArrays) {\n        arrayOut.push(line);\n        line = Utils.indent(indentation + options.defaultIndentation);\n      }\n      line += parse(\n        element,\n        indentation + options.defaultIndentation,\n        level\n      ).trim();\n      arrayOut.push(line);\n    });\n  }\n  return arrayOut;\n};\n\nconst _handleObject = (data, indentation, level) => {\n  // Get the size of the longest index to align all the values\n  var maxIndexLength = Utils.getMaxIndexLength(data);\n  var key;\n  var isError = data instanceof Error;\n\n  var objOut = [];\n  level++;\n  each(keys(data), (i) => {\n    const element = data[i];\n    key = (i + ': ');\n    if (!options.noColor) {\n      key = pColor.keys(key);\n    }\n    key = Utils.indent(indentation) + key;\n\n    // If the value is serializable, render it on the same line\n    if (Utils.isSerializable(element, options.inlineArrays) && (!isError || i !== 'stack')) {\n        // but don't render anything if showEmpty setting is false and data is empty array, object, or string\n      if (!((isObjectLike(element) || isArray(element) || isString(element)) &&\n        isEmpty(element) && !options.showEmpty)) {\n        key += parse(element, maxIndexLength - i.length);\n        objOut.push(key);\n      }\n    } else if (level === options.depth) {\n      // dont nest any more for object if depth level reached\n      key += Utils.indent(maxIndexLength - i.length) +\n      pColor.depth('[Object] (' + keys(element).length + ' keys)');\n      objOut.push(key);\n    } else if (level + 1 === options.depth && isArray(element)) {\n      objOut.push(key);\n    } else {\n      // If the index is an array or object, render it in next line\n      objOut.push(key);\n      objOut.push(\n        parse(\n          isError && i === 'stack' ? element.split('\\n') : element,\n          indentation + options.defaultIndentation,\n          level\n        )\n      );\n    }\n  });\n  return objOut;\n};\n\nconst _handleEmpty = (data, indentation) => {\n  if (isArray(data)) {\n    return Utils.indent(indentation) +\n      (options.noColor ? options.emptyArrayMsg : pColor.empty(options.emptyArrayMsg));\n  } else if (isString(data)) {\n    return Utils.indent(indentation) +\n      (options.noColor ? options.emptyStringMsg : pColor.empty(options.emptyStringMsg));\n  } else if (isObjectLike(data)) {\n    return Utils.indent(indentation) +\n      (options.noColor ? options.emptyObjectMsg : pColor.empty(options.emptyObjectMsg));\n  }\n};\n\nconst _handleSerializable = (data, indentation) => {\n  if (isFunction(data)) {\n    return _handleFunction(data, indentation);\n  } else if (isDate(data) || isNumber(data)) {\n    return Utils.indent(indentation) + _addColorToData(data);\n  } else if ((isObjectLike(data) || isString(data)) && isEmpty(data)) {\n    return _handleEmpty(data, indentation);\n  } else {\n    // Render a string exactly equal\n    return Utils.indent(indentation) + _addColorToData(data);\n  }\n};\n\nexport const parse = (data, indentation = 0, level = 0) => {\n  let output = [];\n\n  // reassign key value back to itself for customColor objects\n  if (options.customColors && isObjectLike(data)) {\n    keys(options.customColors).some(key => {\n      if (!isEmpty(data[key])) {\n        data = pColor[key](data[key]);\n        return true;\n      }\n    });\n  }\n\n  if (Utils.isSerializable(data, options.inlineArrays)) {\n    output = output.concat(_handleSerializable(data, indentation));\n  } else if (isString(data)) {\n    // unserializable string means it's multiline\n    output = output.concat(_handleMultiLine(data, indentation));\n  } else if (isArray(data)) {\n    output = output.concat(_handleArray(data, indentation, level));\n  } else if (isObjectLike(data)) {\n    output = output.concat(_handleObject(data, indentation, level));\n  }\n\n  // Return all the lines as a string\n  return output.join('\\n');\n};\n\nexport default parse;\n"]}